{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","Components/GifGirdItem.js","Components/GifGrid.js","Components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputText","setInputText","onSubmit","event","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","setTimeout","GifGirdItem","className","src","alt","GifGrid","console","log","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAgCeA,MA9Bf,YAAuC,IAAjBC,EAAgB,EAAhBA,cAGlB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAWA,OACI,sBAAMC,SAPS,SAACC,GAChBA,EAAMC,iBACHJ,EAAUK,OAAOC,OAAS,GACzBR,GAAc,SAACS,GAAD,OAAaP,GAAb,mBAA0BO,QAI5C,SACE,uBACMC,KAAO,OACPC,MAAOT,EACPU,SAdY,SAACP,GACrBF,EAAaE,EAAMQ,OAAOF,a,+BCRrBG,EAAO,uCAAG,WAAML,GAAN,uBAAAM,EAAA,6DACbC,EADa,iDACmCC,UAAWR,GAD9C,+DAEAS,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACzB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCwCLO,EArCM,SAACpB,GAClB,MAA0BR,mBAAS,CAC/BoB,KAAK,GACLS,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA+BA,OAzBAC,qBAAW,WAEPnB,EAASL,GACRyB,MAAM,SAACC,GACJC,YAAW,WACPJ,EAAS,CACLX,KAAMc,EACNL,SAAS,MAEd,UAER,CAACrB,IAcGsB,GChBIM,EAhBK,SAAC,GAAmB,EAAlBZ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE3B,OACI,sBAAKsB,UAAU,yCAAf,UACI,qBAAKC,IAAOvB,EACZwB,IAAMd,IAEN,4BAAIA,QC0CDe,MA5Cf,YAA8B,IAAZhC,EAAW,EAAXA,SACd,EAAiCoB,EAAapB,GAAvCqB,EAAP,EAAOA,QAAeH,EAAtB,EAAgBN,KAchB,OAbAqB,QAAQC,IAAIb,GACZY,QAAQC,IAAIhB,GAaR,qCACI,oBAAIW,UAAU,oCAAd,SAAmD7B,IAClDqB,GAAW,mBAAGQ,UAAU,mCAAb,6BACZ,qBAAKA,UAAU,aAAf,SAGQX,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEIA,GADEA,EAAIC,aCgBnBmB,MA3Cf,SAAsBC,GAGlB,MAAmC5C,mBAAS,CAAC,WAA7C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAeA,OACI,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAGA,6BAEQ8C,EAAWvB,KAAI,SAACd,GAAD,OACT,cAAC,EAAD,CAEAA,SAAYA,GADLA,Y,MC3B/BsC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6e600e3d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nfunction AddCategory({setCategories}) {\n    // el ultimo valor actualizado del primero \n    // siempre sera el ultimo ingresado\n    const [inputText, setInputText] = useState('');\n\n    const handleInputText = (event) =>{\n        setInputText(event.target.value);\n    }\n    const handleForm = (event)=>{\n        event.preventDefault();\n        if(inputText.trim().length > 2){\n            setCategories((category)=>[inputText,...category]);\n        }\n    }\n    return (\n        <form onSubmit={handleForm}>\n          <input\n                type = 'text'\n                value={inputText}\n                onChange ={handleInputText}\n          />  \n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories:PropTypes.func.isRequired\n\n}\n\nexport default AddCategory\n\n","export const getGifs = async(category)=>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=lOqCfrYkyq6bvBcbwjM5rqxPz6GmQkNo`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    // console.log(data);\n    const gifs = data.map((img)=>{\n        return{\n            id:img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n    // setImage(gifs)\n}","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nconst useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    });\n\n\n    useEffect( () =>{\n\n        getGifs (category)\n        .then( (imgs) => {\n            setTimeout(() => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            }, 1000);\n        })\n    }, [category])\n    \n    // useEffect(()=>{  \n    //     getGifs(category)\n    //     .then((imgs)=>setState({\n    //         data: imgs,\n    //         loading: false}));\n    // },[category])\n    // setTimeout(()=>{\n    //     setState({\n    //         data:[1,2,3,4],\n    //         loading: false\n    //     })\n    // },3000)\n    return state;\n\n    \n}\n\nexport default useFetchGifs\n","import React from 'react'\n// import PropTypes from 'prop-types'\n\nconst GifGirdItem = ({id,title,url}) => {\n    // console.log(id,title,url)\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src = {url}\n            alt ={title} \n            />\n            <p>{title}</p>\n        </div>\n    )\n}\n\n// GifGirdItem.propTypes = {\n\n// }\n\nexport default GifGirdItem\n\n","// import React, { useEffect, useState } from 'react'\nimport React from 'react'\nimport useFetchGifs from '../hooks/useFetchGifs'\n\n// import PropTypes from 'prop-types'\nimport GifGirdItem from './GifGirdItem';\n// import { getGifs } from '../helpers/getGifs';\n\nfunction GifGrid({category}) {\n    const {loading, data: images } = useFetchGifs(category);\n    console.log(loading);\n    console.log(images);\n\n    // el codigo que se ejecutara una sola vez se manda las dependencias y la funcion \n    // la funcion que tiene adentro se disparar una sola vez :)\n//    const [image, setImage] = useState([]);\n\n\n\n\n    \n\n\n    return (\n        <>\n            <h2 className=\"animate__animated animate__fadeIn\">{category}</h2>\n            {loading && <p className=\"animate__animated animate__flash\">Cargando.......</p>}\n            <div className=\"card-grid \">\n            \n                {\n                    images.map((img)=>(\n                        <GifGirdItem \n                        key ={img.id} \n                        {...img}/>\n                    ))\n                }\n                \n              \n            </div>\n              {/* <button onClick={setCounter}>{counter}</button> */}\n\n                {/* Manda mas de una vez a ejecutarse toda la funcion  */}\n                {/* <button onClick={()=>setCounter(counter+1)}>{counter}</button> */}\n                {/* <li key = {category}>{category}</li> */}\n        </>\n    )\n}\n\n// GifGrid.propTypes = {\n\n// }\n\nexport default GifGrid;\n\n","import React, { useState } from 'react'\n// import PropTypes from 'prop-types'\nimport AddCategory from './AddCategory';\nimport GifGrid from './GifGrid';\n\nfunction GifExpertApp(props) {\n\n    // const categories = ['anime','terror','heroes'];\n    const [categories, setCategories] =useState(['naruto']);\n    // --MI solucion \n    // const handleAdd = ()=>{\n    //     setCategories(categories.concat('comedia'));\n    // }\n    // Solucion del profe\n    // const handleAdd = ()=>{\n    //     setCategories(['comedia',...categories]);\n    // }\n    // const handleAdd = () =>{\n    //     setCategories((category)=>{\n    //         return ['comedia',...category]\n    //     })\n    // }\n    // const [state, setstate] = useState(initialState)\n    return (\n        <>\n          <h2>GifExpertApp</h2>\n          <AddCategory setCategories = {setCategories}/>\n          <hr />\n\n          {/* <button onClick={handleAdd}>Add</button>   */}\n          <ol>\n              {\n                  categories.map((category)=>(\n                        <GifGrid \n                        key = {category}\n                        category = {category}/>\n                    )\n                  )\n              }\n          </ol>\n        </>\n    )\n}\n\n// GifExpertApp.propTypes = {\n\n// }\n\nexport default GifExpertApp\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './Components/GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n\n)\n"],"sourceRoot":""}